
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Textarea } from "@/components/ui/textarea";
import { Shield, Search, AlertTriangle, CheckCircle, XCircle, Clock, Download } from 'lucide-react';

const VulnerabilityScanner = () => {
  const [targetUrl, setTargetUrl] = useState('https://example.com');
  const [scanType, setScanType] = useState('basic');
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [scanResults, setScanResults] = useState([]);

  const mockVulnerabilities = [
    { id: 1, type: 'SQL Injection', severity: 'High', status: 'Found', description: 'Potential SQL injection vulnerability detected in login form' },
    { id: 2, type: 'XSS', severity: 'Medium', status: 'Found', description: 'Cross-site scripting vulnerability in search parameter' },
    { id: 3, type: 'CSRF', severity: 'Low', status: 'Safe', description: 'CSRF protection properly implemented' },
    { id: 4, type: 'SSL/TLS', severity: 'High', status: 'Found', description: 'Weak SSL/TLS configuration detected' },
    { id: 5, type: 'Directory Traversal', severity: 'Medium', status: 'Safe', description: 'No directory traversal vulnerabilities found' },
  ];

  const handleStartScan = () => {
    setIsScanning(true);
    setScanProgress(0);
    setScanResults([]);
    
    // Simulate scanning progress
    const interval = setInterval(() => {
      setScanProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          setIsScanning(false);
          setScanResults(mockVulnerabilities);
          return 100;
        }
        return prev + 10;
      });
    }, 500);
  };

  const getSeverityColor = (severity) => {
    switch (severity.toLowerCase()) {
      case 'high': return 'bg-red-500';
      case 'medium': return 'bg-yellow-500';
      case 'low': return 'bg-green-500';
      default: return 'bg-gray-500';
    }
  };

  const getStatusIcon = (status) => {
    switch (status.toLowerCase()) {
      case 'found': return <XCircle className="w-4 h-4 text-red-500" />;
      case 'safe': return <CheckCircle className="w-4 h-4 text-green-500" />;
      default: return <Clock className="w-4 h-4 text-yellow-500" />;
    }
  };

  return (
    <div className="space-y-6">
      {/* Scanner Configuration */}
      <Card className="bg-gray-900/50 border-red-900/20">
        <CardHeader>
          <CardTitle className="text-red-400 flex items-center gap-2">
            <Shield className="w-5 h-5" />
            Vulnerability Scanner Configuration
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label className="text-gray-300">Target URL</Label>
              <Input
                value={targetUrl}
                onChange={(e) => setTargetUrl(e.target.value)}
                className="bg-gray-800 border-red-900/20 text-white"
                placeholder="https://target.com"
              />
            </div>
            <div>
              <Label className="text-gray-300">Scan Type</Label>
              <Select value={scanType} onValueChange={setScanType}>
                <SelectTrigger className="bg-gray-800 border-red-900/20 text-white">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent className="bg-gray-800 border-red-900/20">
                  <SelectItem value="basic">Basic Scan</SelectItem>
                  <SelectItem value="comprehensive">Comprehensive Scan</SelectItem>
                  <SelectItem value="stealth">Stealth Scan</SelectItem>
                  <SelectItem value="aggressive">Aggressive Scan</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
          
          <div className="flex gap-4">
            <Button 
              onClick={handleStartScan}
              disabled={isScanning}
              className="bg-red-600 hover:bg-red-700 text-white"
            >
              <Search className="w-4 h-4 mr-2" />
              {isScanning ? 'Scanning...' : 'Start Scan'}
            </Button>
            <Button 
              variant="outline" 
              className="border-red-900/20 text-red-400 hover:bg-red-900/20"
            >
              Stop Scan
            </Button>
          </div>

          {isScanning && (
            <div className="space-y-2">
              <div className="flex justify-between text-sm text-gray-400">
                <span>Scanning progress</span>
                <span>{scanProgress}%</span>
              </div>
              <Progress value={scanProgress} className="bg-gray-800" />
            </div>
          )}
        </CardContent>
      </Card>

      {/* Scan Results */}
      {scanResults.length > 0 && (
        <Card className="bg-gray-900/50 border-red-900/20">
          <CardHeader>
            <CardTitle className="text-red-400 flex items-center gap-2 justify-between">
              <div className="flex items-center gap-2">
                <AlertTriangle className="w-5 h-5" />
                Vulnerability Report
              </div>
              <div className="flex gap-2">
                <Button size="sm" variant="outline" className="border-red-900/20 text-red-400">
                  <Download className="w-4 h-4 mr-2" />
                  Export
                </Button>
              </div>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {scanResults.map((vuln) => (
                <div key={vuln.id} className="p-4 bg-gray-800/50 rounded-lg border border-red-900/20">
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center gap-3">
                      {getStatusIcon(vuln.status)}
                      <h3 className="font-semibold text-white">{vuln.type}</h3>
                      <Badge className={`${getSeverityColor(vuln.severity)} text-white`}>
                        {vuln.severity}
                      </Badge>
                    </div>
                    <Badge variant="outline" className={vuln.status === 'Found' ? 'border-red-500 text-red-400' : 'border-green-500 text-green-400'}>
                      {vuln.status}
                    </Badge>
                  </div>
                  <p className="text-gray-300 text-sm">{vuln.description}</p>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Port Scanner */}
      <Card className="bg-gray-900/50 border-red-900/20">
        <CardHeader>
          <CardTitle className="text-red-400">Port Scanner</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <Label className="text-gray-300">Target IP</Label>
              <Input
                className="bg-gray-800 border-red-900/20 text-white"
                placeholder="192.168.1.1"
              />
            </div>
            <div>
              <Label className="text-gray-300">Port Range</Label>
              <Input
                className="bg-gray-800 border-red-900/20 text-white"
                placeholder="1-1000"
              />
            </div>
            <div>
              <Label className="text-gray-300">Scan Type</Label>
              <Select>
                <SelectTrigger className="bg-gray-800 border-red-900/20 text-white">
                  <SelectValue placeholder="TCP SYN" />
                </SelectTrigger>
                <SelectContent className="bg-gray-800 border-red-900/20">
                  <SelectItem value="tcp-syn">TCP SYN</SelectItem>
                  <SelectItem value="tcp-connect">TCP Connect</SelectItem>
                  <SelectItem value="udp">UDP</SelectItem>
                  <SelectItem value="comprehensive">Comprehensive</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
          <Button className="bg-red-600 hover:bg-red-700 text-white">
            Start Port Scan
          </Button>
        </CardContent>
      </Card>

      {/* Network Analysis */}
      <Card className="bg-gray-900/50 border-red-900/20">
        <CardHeader>
          <CardTitle className="text-red-400">Network Analysis</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label className="text-gray-300">Custom Headers</Label>
              <Textarea
                className="bg-gray-800 border-red-900/20 text-white"
                placeholder="User-Agent: Custom Agent&#10;X-Forwarded-For: 127.0.0.1"
                rows={4}
              />
            </div>
            <div>
              <Label className="text-gray-300">Payload Options</Label>
              <Textarea
                className="bg-gray-800 border-red-900/20 text-white"
                placeholder="Custom payloads..."
                rows={4}
              />
            </div>
          </div>
          <div className="flex gap-4">
            <Button className="bg-red-600 hover:bg-red-700 text-white">
              Analyze Network
            </Button>
            <Button variant="outline" className="border-red-900/20 text-red-400 hover:bg-red-900/20">
              Reset Configuration
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default VulnerabilityScanner;
